import "express-async-errors";
import express, { Request, Response, NextFunction } from "express";
import swaggerUi from "swagger-ui-express";
import config from "./config";

import Debuger from "./debuger";

import routes from "./routes";
import apiErrorHandler from "./middlewares/api_error_handler";
import ApiError from "./errors/ApiError";

import swaggerDocs from "./swagger.json";

const Debug = Debuger("Routes");
const app = express();

const swaggerOptions = {
  definition: {
    {
  "openapi": "3.1.0",
  "info": {
    "title": "Frost Shorter API",
    "description": "Simple API used for [Frost Shorter](https://frostsh.vercel.app)",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://url-shorter-api.vercel.app/"
    }
  ],
  "paths": {
    "/pages": {
      "get": {
        "summary": "Returns an array of numbers.",
        "description": "Each page contains a max of 15 links.",
        "tags": ["Pages"],
        "responses": {
          "200": {
            "description": "A JSON Array of numbers",
            "content": {
              "applications/json": {
                "schema": {
                  "type": "array",
                  "example": [1, 2, 3, 4, 5]
                }
              }
            }
          }
        }
      }
    },
    "/{shortUrl}": {
      "get": {
        "summary": "Redirects to the original URL.",
        "description": "Redirects to the original URL.",
        "parameters": [
          {
            "in": "path",
            "name": "shortUrl",
            "required": true,
            "description": "The 8 digits string generated by the API",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Links"],
        "responses": {
          "308": {
            "description": "Returns a 308 when the API successfully redirected the user to the desired URL."
          },
          "404": {
            "description": "Returns a 404 if the URL don't exist or if the URL is a single access link and was already accessed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status_code": 404,
                    "error": "Url not founded"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "post": {
        "summary": "Creates a new shorted link.",
        "description": "Returns a 8 digits string that can be used to access the full URL.",
        "tags": ["Links"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": null,
                "example": {
                  "url": "http://example.com",
                  "singleAccess": true
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns a 201 when the URL was successfully shortened.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "IGeEwksO"
                }
              }
            }
          }
        }
      }
    },
    "/links/{page}": {
      "get": {
        "summary": "Returns an array of Links.",
        "description": "Returns an array up to 15 Links. Can be filtered by the page.",
        "parameters": [
          {
            "in": "path",
            "name": "page",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "The Page of the list"
          }
        ],
        "tags": ["Links"],
        "responses": {
          "200": {
            "description": "A JSON Array of Links",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": null,
                  "example": [
                    {
                      "id": 1,
                      "full_url": "https://example.com",
                      "short_url": "51eo-ZR0",
                      "single_access": false,
                      "access": 18
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Link": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The Website URL to be shortened."
          },
          "singleAccess": {
            "type": "boolean",
            "description": "Defines whether the URL can be accessed more than once."
          }
        }
      }
    }
  }
}
  }
}

/** Define Swagger Documentation route */
app.use("/docs", swaggerUi.serve, swaggerUi.setup(swaggerOptions));

/** Debug the request */
app.use((req: Request, res: Response, next: NextFunction) => {
  Debug.log(`METHOD - [${req.method}], URL - [${req.url}], IP - [${req.socket.remoteAddress}]`);

  res.on("finish", () => {
    Debug.log(
      `METHOD - [${req.method}], URL - [${req.url}], IP - [${req.socket.remoteAddress}], STATUS - [${res.statusCode}]`
    );
  });
  console.log('\n');
  
  next();
});

/** Parse the request */
app.use(express.urlencoded({ extended: false }));
app.use(express.json());

/** Rules of the API */
app.use((req: Request, res: Response, next: NextFunction) => {
  res.setHeader("Access-Control-Allow-Credentials", "true");
  res.setHeader("Access-Control-Allow-Origin", "*");
  // another common pattern
  // res.setHeader('Access-Control-Allow-Origin', req.headers.origin);
  res.setHeader("Access-Control-Allow-Methods", "GET,OPTIONS,PATCH,DELETE,POST,PUT");
  res.setHeader(
    "Access-Control-Allow-Headers",
    "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version"
  );

  next();
});

/** Allow external applications to request the API's allowed options */
app.options("/", (req: Request, res: Response) => res.end());

/** Import routes from 'routes.ts' file */
app.use("/", routes);

/** Error Handling */
app.use((req: Request, res: Response) => {
  throw ApiError.notFound();
});
app.use(apiErrorHandler);

/** Create the server */
app.listen(config.server.port, () => {
  Debug.info(`Server running on port ${config.server.port}`);
});
